package dabba.doo.annotationprocessor.core.reflection;

import com.squareup.javapoet.ClassName;
import dabba.doo.annotationprocessor.core.annotations.J2dSpringRestCrudApi;
import dabba.doo.annotationprocessor.core.annotations.entity.J2dColumn;
import dabba.doo.annotationprocessor.core.annotations.entity.J2dId;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.TypeElement;

/**
 * ClassReflectionTool class Util class to play with reflection and annotation processor elements
 *
 * @author josue.rojas
 */
public class ClassReflectionTool {

  /**
   * Get declared field using TypeElement instance
   *
   * @param typeElement type element created by annotation processor
   * @return declared fields
   */
  public static List<? extends Element> getDeclaredFields(final TypeElement typeElement) {
    return typeElement.getEnclosedElements().stream()
        .filter(e -> ElementKind.FIELD.equals(e.getKind()))
        .collect(Collectors.toList());
  }

  /**
   * Get declared fields using java simple class
   *
   * @param clazz Java simple clazz
   * @return
   */
  public static List<Field> getDeclaredFields(final Class<?> clazz) {
    return Arrays.asList(clazz.getDeclaredFields());
  }

  /**
   * Get id field using java simple class
   *
   * @param clazz java simple class
   * @throws IllegalStateException when id field does not exist for J2D annotated class
   * @return annotated field id
   */
  public static Field getIdField(final Class<?> clazz) {

    final Optional<Field> idFieldOptional =
        Arrays.stream(clazz.getDeclaredFields())
            .filter(
                field ->
                    field.isAnnotationPresent(J2dColumn.class)
                        && field.isAnnotationPresent(J2dId.class))
            .findFirst();

    if (!idFieldOptional.isPresent()) {
      throw new IllegalStateException(
          "Id field must be annotated with @J2dId for " + clazz.getName() + " class");
    }

    return idFieldOptional.get();
  }

  /**
   * Get id field using type element generated by annotation processing
   *
   * @param clazz type element generated by annotation processing
   * @throws IllegalStateException when id field does not exist for J2D annotated class
   * @return annotated element.field id
   */
  public static Element getIdField(final TypeElement clazz) {

    final Optional<? extends Element> idFieldOptional =
        ClassReflectionTool.getDeclaredFields(clazz).stream()
            .filter(
                field ->
                    field.getAnnotation(J2dColumn.class) != null
                        && field.getAnnotation(J2dId.class) != null)
            .findFirst();

    if (!idFieldOptional.isPresent()) {
      throw new IllegalStateException(
          "Id field must be annotated with @J2dId for " + clazz.getSimpleName() + " class");
    }

    return idFieldOptional.get();
  }

  /**
   * Get path for API main annotations
   *
   * @param clazz java simple class
   * @param annotationClass API annotation with path field
   * @return base path
   */
  public static String getPathFromMainApiAnnotation(
      final TypeElement clazz, final Class<?> annotationClass) {

    if (J2dSpringRestCrudApi.class.equals(annotationClass)) {
      return clazz.getAnnotation(J2dSpringRestCrudApi.class).path();
    }

    throw new IllegalStateException("No path fetched from annotation " + annotationClass.getName());
  }

  /**
   * Get path for API main annotations
   *
   * @param clazz type element generated by annotation processing
   * @param annotationClass API annotation with path field
   * @param paramName parameter name
   * @return base path
   */
  public static String getPathFromMainApiAnnotation(
      final TypeElement clazz, final Class<?> annotationClass, final String paramName) {

    if (J2dSpringRestCrudApi.class.equals(annotationClass)) {
      return String.format(
          "%s/{%s}", clazz.getAnnotation(J2dSpringRestCrudApi.class).path(), paramName);
    }

    throw new IllegalStateException("No path fetched from annotation " + annotationClass.getName());
  }

  /**
   * Get class name based on package and class name
   *
   * @param packageName package name as string
   * @param simpleName class name as string
   * @return ClassName instance based on parameters
   */
  public static ClassName getClassNameFromClassName(
      final String packageName, final String simpleName) {
    return ClassName.get(packageName, simpleName);
  }
}
